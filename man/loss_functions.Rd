% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/loss_functions.R
\name{loss_functions}
\alias{loss_functions}
\alias{loss_quadratic}
\alias{loss_absolute}
\alias{loss_difference}
\alias{loss_huber}
\alias{loss_hinge}
\title{Loss functions}
\usage{
loss_quadratic(
  observed,
  predicted,
  SESOI_lower = 0,
  SESOI_upper = 0,
  negative_weight = 1,
  positive_weight = 1,
  na.rm = FALSE
)

loss_absolute(
  observed,
  predicted,
  SESOI_lower = 0,
  SESOI_upper = 0,
  negative_weight = 1,
  positive_weight = 1,
  na.rm = FALSE
)

loss_difference(
  observed,
  predicted,
  SESOI_lower = 0,
  SESOI_upper = 0,
  negative_weight = 1,
  positive_weight = 1,
  na.rm = FALSE
)

loss_huber(
  observed,
  predicted,
  SESOI_lower = 0,
  SESOI_upper = 0,
  negative_weight = 1,
  positive_weight = 1,
  na.rm = FALSE
)

loss_hinge(
  observed,
  predicted,
  SESOI_lower = 0,
  SESOI_upper = 0,
  negative_weight = 1,
  positive_weight = 1,
  exponent = 1,
  na.rm = FALSE
)
}
\arguments{
\item{observed}{Numeric vector}

\item{predicted}{Numeric vector}

\item{SESOI_lower}{Lower smallest effect size of interest threshold. Default is 0}

\item{SESOI_upper}{Upper smallest effect size of interest threshold.  Default is 0}

\item{negative_weight}{How should negative residuals be weighted? Default is 1}

\item{positive_weight}{How should positive residuals be weighted? Default is 1}

\item{na.rm}{Should NAs be removed? Default is \code{FALSE}}

\item{exponent}{Numeric scalar. Default is 1.}
}
\description{
Loss functions

Quadratic loss

Absolute loss

Difference loss

Huber loss

Hinge loss
}
\examples{
data("yoyo_mas_data")

model <- lm(MAS ~ YoYoIR1, yoyo_mas_data)

observed <- yoyo_mas_data$MAS
predicted <- predict(model)

SESOI_lower <- -0.5
SESOI_upper <- 0.5

# Square loss
loss_quadratic(
  observed = observed,
  predicted = predicted,
  SESOI_lower = SESOI_lower,
  SESOI_upper = SESOI_upper
)

# Absolute loss
loss_absolute(
  observed = observed,
  predicted = predicted,
  SESOI_lower = SESOI_lower,
  SESOI_upper = SESOI_upper
)

# Difference
loss_difference(
  observed = observed,
  predicted = predicted,
  SESOI_lower = SESOI_lower,
  SESOI_upper = SESOI_upper
)

# Huber loss
loss_huber(
  observed = observed,
  predicted = predicted,
  SESOI_lower = SESOI_lower,
  SESOI_upper = SESOI_upper
)

# Hinge loss
loss_hinge(
  observed = observed,
  predicted = predicted,
  SESOI_lower = SESOI_lower,
  SESOI_upper = SESOI_upper
)
}
